include ./file

mixin fieldFooter(information, error)
	- if (information)
		span.description=information
	- if (error)
		p.error-description #{error}

mixin booleanField(inputParams, params)
	.form-row(class=params.formRowClass || '')
		label(class=(params.error !== undefined ? 'error ' : '') + inputParams.class)
			span #{params.label}
				- if (params.required)
					abbr(title='#{ (params.required == true ? 'This field is required' : params.required) }') *
			input(name=inputParams.name, type=inputParams.type, value='on', checked=(inputParams.checked ? 'checked' : null))
			mixin fieldFooter(params.information, params.error)

mixin radioField(inputParams, params)
	- inputParams.type = inputParams.class = 'radio';
	mixin booleanField(inputParams, params)

mixin checkboxField(inputParams, params)
	- inputParams.type = inputParams.class = 'checkbox';
	mixin booleanField(inputParams, params)

mixin checkboxFieldForObject(inputParams, params)
	- params.error = params.errors[inputParams.name];
	- inputParams.value = params.data[inputParams.name] === true;
	mixin checkboxField(inputParams, params)

mixin checkBoxGroupForObject(inputParams, params)
	.form-row.field-group(class=params.formRowClass || '')
		div.label(class=params.errors[inputParams.name] && 'error')
			span #{params.label}
		ul
			- each option in params.list
				li
					label
						input(name=inputParams.name, type='checkbox', value=option, checked=(params.data[inputParams.name] && params.data[inputParams.name].indexOf(option) !== -1))
						span=option
			mixin fieldFooter(params.information, params.errors[inputParams.name])

mixin groupedCheckBoxGroupForObject(inputParams, params)
	fieldset
		h3=params.label
		div(class=params.errors[inputParams.name] && 'error')
		- each options in params.groups
			.form-row.field-group
				div.label
					span #{options.label}
					-if (options.description !== undefined)
						strong=options.description
				ul
					-each option in options.items
						li
							label
								input(name='#{inputParams.name}[#{options.value}]', type='checkbox', value='#{option}', checked=(params.data[inputParams.name] && params.data[inputParams.name][options.value] && (params.data[inputParams.name][options.value].indexOf(option) !== -1)))
								span=option
					mixin fieldFooter(params.information, params.errors[inputParams.name])


mixin inputField(inputParams, params)
	.form-row(class=params.formRowClass || '')
		label(class=(params.error !== undefined ? 'error ' : '') + params.labelClass)
			span #{params.label}
				- if (params.required)
					abbr(title='#{ (params.required == true ? 'This field is required' : params.required) }') *
			input(class=inputParams.class, name='#{inputParams.name}', type='#{inputParams.type}', value='#{inputParams.value || ''}', placeholder=inputParams.placeholder, maxlength=inputParams.maxLength)
			mixin fieldFooter(params.information, params.error)

mixin fileField(inputParams, params)
	.form-row(class=params.formRowClass || '')
		label(class=(params.error !== undefined ? 'error ' : '') + params.labelClass)
			span #{params.label}
				- if (params.required)
					abbr(title='#{ (params.required == true ? 'This field is required' : params.required) }') *
			input(class=inputParams.class, name='#{inputParams.name}', type='file', multiple=params.multiple ? 'multiple' : '', value='#{inputParams.value || ''}', placeholder=inputParams.placeholder)

			mixin fieldFooter(params.information, params.error)
		mixin downloadLink(inputParams.value, true)
		- if (inputParams.value)
			input(type='hidden', name='current-#{inputParams.name}', value=typeof inputParams.value === 'object' ? JSON.stringify(inputParams.value) : inputParams.value)

mixin fileFieldForObject(inputParams, params)
	- params.error = params.errors[inputParams.name];
	- inputParams.value = params.data[inputParams.name];
	mixin fileField(inputParams, params)

//mixin textField(label, name, value, required, error, maxLength, information, placeholder)
mixin textField(inputParams, params)
	- inputParams.type = 'text'
	mixin inputField(inputParams, params)

mixin textFieldForObject(inputParams, params)
	- params.error = params.errors[inputParams.name];
	- inputParams.value = params.data[inputParams.name];
	mixin textField(inputParams, params)

//mixin passwordField(label, name, required, error, maxLength, information, placeholder)
mixin passwordField(inputParams, params)
	- inputParams.type = 'password'
	mixin inputField(inputParams, params)

//mixin passwordFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
mixin passwordFieldForObject(inputParams, params)
	- params.error = params.errors[inputParams.name]
	mixin passwordField(inputParams, params)

mixin textboxField(inputParams, params)
	.form-row(class=params.formRowClass || '')
		label(class=(params.error !== undefined ? 'error ' : '') + params.labelClass)
			span #{params.label}
				- if (params.required)
					abbr(title='#{ (params.required == true ? 'This field is required' : params.required) }') *
			textarea(class=inputParams.class, name=inputParams.name)=inputParams.value
			mixin fieldFooter(params.information, params.error)

mixin textboxFieldForObject(inputParams, params)
	- params.error = params.errors[inputParams.name];
	- inputParams.value = params.data[inputParams.name];
	mixin textboxField(inputParams, params)

//- Don't use this directly. Use dropdown or listbox
mixin selectField(inputParams, params)
	.form-row(class=params.formRowClass || '')
		label(class=(params.error !== undefined ? 'error ' : '') + params.labelClass)
			span #{params.label}
				- if (params.required)
					abbr(title='#{ (params.required == true ? 'This field is required' : params.required) }') *
			- if (Array.isArray(params.list))
				select(class=inputParams.class,name='#{inputParams.name}', multiple=(params.multiple ? 'multiple' : null ))
					- each option in params.list
						option(selected=(option == inputParams.value) ? 'selected' : null)=option
			- else
				select(class=inputParams.class,name='#{inputParams.name}')
					- each option, text in params.list
						option(selected=(option == inputParams.value) ? 'selected' : null, value=option)=text

			mixin fieldFooter(params.information, params.error)

mixin listboxField(inputParams, params)
	- params.multiple = true;
	mixin selectField(inputParams, params)

mixin dropdownField(inputParams, params)
	- params.multiple = false;
	mixin selectField(inputParams, params)

mixin dropdownForObject(inputParams, params)
	- params.error = params.errors[inputParams.name];
	- inputParams.value = params.data[inputParams.name];
	mixin dropdownField(inputParams, params)
