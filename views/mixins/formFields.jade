include ./file

mixin fieldFooter(information, error)
	- if (information)
		span.description=information
	- if (error)
		p.error-description #{error}

mixin booleanField(type, classname, label, name, checked, required, error, information)
	.form-row
		label(class=(error !== undefined ? 'error ' : '') + classname)
			span #{label}
				- if (required)
					abbr(title='#{ (required == true ? 'This field is required' : required) }') *
			input(name='#{name}', type='#{type}', value='on', checked=(checked ? 'checked' : null))
			mixin fieldFooter(information, error)

mixin checkboxField(label, name, checked, required, error, information)
	mixin booleanField('checkbox', 'checkbox', label, name, checked, required, error, information)

mixin checkboxFieldForObject(label, name, dataObject, required, error, information)
	mixin booleanField('checkbox', 'checkbox', label, name, dataObject[name] === true, required, error[name], information)

mixin checkBoxGroupForObject(label, name, dataObject, required, errors, list, information)
	.form-row.field-group
		div.label(class=errors[name] && 'error')
			span #{label}
		ul
			li
				label
					-if (Array.isArray(list))
						-each option in list
							input(name='#{name}', type='checkbox', value='#{option}', checked=(dataObject[name] && dataObject[name].indexOf(option) !== -1))
							span=option
					-else	
						-each option, key in list
							input(name='#{name}', type='checkbox', value='#{option}', checked=(dataObject[name] && dataObject[name].indexOf(option.toString()) !== -1))
							span=key
			
			mixin fieldFooter(information, errors[name])

mixin groupedCheckBoxGroupForObject(label, name, dataObject, required, errors, groups, information)
	fieldset
		h3=label
		div(class=errors[name] && 'error')
		-each options in groups
			.form-row.field-group
				div.label
					span #{options.label}
					-if (options.description !== undefined)
						strong= options.description
				ul
					-each option in options.items
						li
							label
								input(name='#{name}[#{options.value}]', type='checkbox', value='#{option}', checked=(dataObject[name] && dataObject[name][options.value] && (dataObject[name][options.value].indexOf(option) !== -1)))
								span=option
					mixin fieldFooter(information, errors[name])

mixin radioField(label, name, checked, error)
	mixin booleanField('radio', 'radio', label, name, checked, required, error, information)

mixin inputField(type, classname, label, name, value, required, error, maxLength, information, placeholder)
	.form-row
		label(class=error && 'error')
			span #{label}
				- if (required)
					abbr(title='#{ (required == true ? 'This field is required' : required) }') *
			input(class=classname, name='#{name}', type='#{type}', value='#{value || ''}', placeholder=placeholder, maxlength=maxLength)
			mixin fieldFooter(information, error)

mixin fileField(classname, label, name, value, required, error, information)
	.form-row
		label(class=error && 'error')
			span #{label}
				- if (required)
					abbr(title='#{ (required == true ? 'This field is required' : required) }') *
			input(class=classname, name='#{name}', type='file', multiple='multiple')
			mixin fieldFooter(information, error)
		mixin downloadLink(value, true)
		- if (value)
			input(type='hidden', name='current-#{name}', value=typeof value === 'object' ? JSON.stringify(value) : value)

mixin fileFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin fileField('file', label, name, dataObject[name], required, errors[name], information)

mixin textField(label, name, value, required, error, maxLength, information, placeholder)
	mixin inputField('text', 'textbox', label, name, value, required, error, maxLength, information, placeholder)

mixin textFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin textField(label, name, dataObject[name], required, errors[name], maxLength, information, placeholder)

mixin passwordField(label, name, required, error, maxLength, information, placeholder)
	mixin inputField('password', 'textbox', label, name, '', required, error, maxLength, information, placeholder)

mixin passwordFieldForObject(label, name, dataObject, required, errors, maxLength, information, placeholder)
	mixin passwordField(label, name, required, errors[name], maxLength, information, placeholder)

mixin textboxField(classname, label, name, value, required, error, maxLength, information)
	.form-row
		label(class=error && 'error')
			span #{label}
				- if (required)
					abbr(title='#{ (required == true ? 'This field is required' : required) }') *
			textarea(class=classname, name='#{name}')=value
			mixin fieldFooter(information, error)

mixin textboxFieldForObject(classname, label, name, dataObject, required, error, maxLength, information)
	mixin textboxField(classname, label, name, dataObject[name], required, errors[name], maxLength, information)

//- Don't use this directly. Use dropdown or listbox
mixin selectField(classname, label, name, currentValue, required, error, list, information, multiple)
	.form-row
		label(class=error && 'error')
			span #{label}
				- if (required)
					abbr(title='#{ (required == true ? 'This field is required' : required) }') *
			- if (Array.isArray(list))
				select(class=classname,name='#{name}', multiple=(multiple ? 'multiple' : null ))
					- each option in list
						option(selected=(option == currentValue) ? 'selected' : null)=option
			- else
				select(class=classname,name='#{name}')
					- each value, text in list
						option(value=value, selected=(value == currentValue) ? 'selected' : null)=text

			mixin fieldFooter(information, error)

mixin listboxField(classname, label, name, value, required, error, list, information)
	mixin selectField(classname, label, name, value, required, error, list, information, true)

mixin dropdownField(classname, label, name, value, required, error, list, information)
	mixin selectField(classname, label, name, value, required, error, list, information, false)

mixin dropdownForObject(label, name, dataObject, required, errors, list, information)
	mixin dropdownField('dropdown', label, name, dataObject[name], required, errors[name], list, information)